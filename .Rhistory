gather(code, value, new_sp_m014:newrelf65, na.rm = TRUE) %>%
mutate(
code = stringr::str_replace(code, "newrel", "new_rel")
) %>%
separate(code, c("new", "var", "sexage")) %>%
select (-new, -iso2, -iso3) %>%
separate(sexage, c("sex", "age"), sep = 1)
who %>%
gather(code, value, new_sp_m014:newrel_f65, na.rm = TRUE) %>%
mutate(
code = stringr::str_replace(code, "newrel", "new_rel")
) %>%
separate(code, c("new", "var", "sexage")) %>%
select (-new, -iso2, -iso3) %>%
separate(sexage, c("sex", "age"), sep = 1)
library(nycflights13)
airlines
airports
planes
weather
nycflights13::weather
flights
view(flights)
view(weather)
library(forcats)
planes %>%
count(tailnum) %>%
filter(n>1)
weather %>%
count(year, monthy, day, hour, origin) %>%
filter(n>1)
weather %>%
count(year, month, day, hour, origin) %>%
filter(n>1)
weather %>%
count(year, month, day, hour, origin) %>%
filter(n>1)
flights %>%
count(year, month, day, flight) %>%
filter(n>1)
flights %>%
count(year, month, day, tailnum) %>%
filter(n>1)
flights2
flights2 <- flights %>%
select(year:day, hour, origin, dest, tailnum, carrier)
flights2
view(flights2)
flights2 %>%
select(-origin, -dest) %>%
left_join(airlines, by = "carrier")
flights2 %>%
select(-origin, -dest) %>%
mutate(name = airlines$name[match(carrier, airlines$carrier)])
x <- tibble(
~key, ~val_x,
1, "x1",
2, "x2",
3, "x3"
)
rlang::last_error()
x <- tibble(
~"key", ~val_x,
1, "x1",
2, "x2",
3, "x3"
)
x <- tibble(
~"key", ~"val_x",
1, "x1",
2, "x2",
3, "x3"
)
x <- tribble(
~key, ~val_x,
1, "x1",
2, "x2",
3, "x3"
)
y <- tribble(
1, "y1",
2, "y2",
4, "y3"
)
y <- tribble(
~key, ~val_y,
1, "y1",
2, "y2",
4, "y3"
)
flights2 %>%
left_join(weather)
view(flights2 %>%
left_join(weather))
flights2 %>%
left_join(planes, by = "tailnum")
view(flights2 %>%
left_join(planes, by = "tailnum"))
flights2 %>%
left_join(airpors, c("dest", "faa"))
flights2 %>%
left_join(airports, c("dest", "faa"))
flights2 %>%
left_join(airports, c("dest" ="faa"))
airports
flights2
airports
view(airports)
view(flights2)
flights2 %>%
left_join(airports, c("origin"="faa"))
top_dest <- flights %>%
count(dest, sort = TRUE) %>%
head(10)
top_dest
flights %>%
filter(dest %in% top_dest)
flights %>%
filter(dest %in% top_dest$dest)
flights %>%
semi_join(top_dest)
flights %>%
anti_join(planes, by = "tailnum") %>%
count(tailnum, sort = TRUE)
df1 <- tribble(
~x, ~y,
1, 1,
2, 1
)
df2 <- tribble(
~x, ~y,
1, 1,
1, 2,
)
intersect(df1, df2)
union(df1, df2)
setdiff(df1, df2)
setdiff(df2, df1)
library(stringr)
library(tidyverse)
string1 <- "this is a string"
string2 <- 'To put a "quote" inside a string, use single quote'
print(string2)
string2 <- 'To put a \"quote\" inside a string, use single quote'
print(string2)
string2 <- 'To put a /"quote/" inside a string, use single quote'
print(string2)
x <- c("\"", "\\")
x
writeLines(x)
?"'"
"\u00b5"
c("one", "two", "three")
str_length(c("a", "R for data science", NA))
str_c("x", "y")
str_c("x", "y", sep = ",")
c("abc", NA)
str_c("|-", x, "-|")
x <- c("abc", NA)
str_c("|-", x, "-|")
str_c("|-", str_replace_na(x), "-|")
str_c("prefix-", c("a", "b", "c"), "-suffix")
name <- "Hadley"
time_of_day <- "morning"
birthday <- FALSE
str_c(
"Good", time_of_day, " ", name,
if (birthday) "and HAPPY BIRTHDAY",
"."
)
str_c(
"Good ", time_of_day, " ", name,
if (birthday) "and HAPPY BIRTHDAY",
"."
)
birthday <- TRUE
str_c(
"Good ", time_of_day, " ", name,
if (birthday) "and HAPPY BIRTHDAY",
"."
)
str_c(
"Good ", time_of_day, " ", name,
if (birthday) " and HAPPY BIRTHDAY",
"."
)
str_c(c("x", "y", "z"), collapse = ", ")
x <- c("Apple", "Banana", "Pear")
str_sub(x, 1, 3)
str_sub(x, 2, 3)
str_sub(x, -3, -1)
str_sub("a", 1, 5)
str_sub(x, 1, 1) <- str_to_lower(str_sub(x, 1, 1))
x
str_sub(x, 1, 1) <- str_to_lower(str_sub(x, 1, 1))
x
caret?
lubridate?
library(data.table)
library(data.table)
library(broom)
die <- 1:6
ls()
sample(size = 2, die)
sample(size = 2, die)
sample(size = 2, die)
sample(size = 2, die)
sample(size = 2, die)
sample(size = 2, die)
sample(size = 2, die)
sample(size = 2, die)
sample(size = 2, die)
sample(size = 2, die)
sample(size = 2, die)
sample(size = 2, die)
mtcars
plot(y = mtcars$mpg, x = mtcars$disp, xlab = "Engine Size (cubic inches)",
ylab = "Fuel Efficiency (Miles per Gallon)")
model <- lm(mtcars$mpg ~ mtcars$disp)
coef(model)
coef(model)[2] * 200 + coef(model)[1]
summary(model)
library(party)
tree <- ctree(mpg ~ ., data = mtcars)
set.seed(123)
library(nnet)
iris.nn <- nnet(Species ~ ., data = iris, size = 2)
table(iris$Species, predict(iris.nn, iris, type = "class"))
library(e1071)
x <- rbind(matrix(rnorm(100, sd = 0.3), ncol = 2), matrix(rnorm(100,
mean = 1, sd = 0.3), ncol = 2))
colnames(x) <- c("x", "y")
plot(x)
cl <- kmeans(x, 2)
plot(x, pch = cl$cluster)
set.seed(123)
x <- rnorm(100, 2, 1)
y = exp(x) + rnorm(5, 0, 2)
plot(x, y)
linear <- lm(y ~ x)
abline(a = coef(linear[1], b = coef(linear[2], lty = 2)))
x1 <- c(0, 0, 1, 1)
x2 <- c(0, 1, 0, 1)
logic <- data.frame(x1, x2)
logic$AND <- as.numeric(x1 & x2)
logic
library(neuralnet)
library(dplyr)
library(tidyr)
library(ggplot2)
library(vioplot)
library(corrplot)
library(gmodels)
library(matrixStats)
PSDS_PATH <- file.path(dirname(dirname(getwd())))
state <- read.csv(file.path(PSDS_PATH, 'data', 'state.csv'))
library(magrittr)
foo_foo <- little_bunny()
foo_foo_1 <- hop(foo_foo, through = forest)
hop?
diamonds <- ggplot::diamonds
library(tidyverse)
diamonds <- ggplot2::diamonds
diamonds2 <- diamonds %>%
dplyr::mutate(price_per_carat = price / carat)
library(pryr)
install.packages("pryr")
library(pryr)
library(pryr)
foo_foo <- little_bunny()
pryr::object_size(diamonds)
df <- tibble::tibble(
a = rnorm(10),
b = rnorm(10),
c = rnorm(10),
d = rnorm(10)
)
df$a <- (df$a - min(df$a, na.rm = TRUE)) /
(max(df$a, na.rm = TRUE) - min(df$a, na.rm = TRUE))
df <- tibble::tibble(
a = rnorm(10),
b = rnorm(10),
c = rnorm(10),
d = rnorm(10)
)
df$a <- (df$a - min(df$a, na.rm = TRUE)) /
(max(df$a, na.rm = TRUE) - min(df$a, na.rm = TRUE))
df$b <- (df$b - min(df$b, na.rm = TRUE)) /
(max(df$b, na.rm = TRUE) - min(df$b, na.rm = TRUE))
df$c <- (df$c - min(df$c, na.rm = TRUE)) /
(max(df$c, na.rm = TRUE) - min(df$c, na.rm = TRUE))
df$d <- (df$d - min(df$d, na.rm = TRUE)) /
(max(df$d, na.rm = TRUE) - min(df$d, na.rm = TRUE))
View(df)
rescalse01 <- function(x){
rng <- range(x,na.rm = TRUE)
(x - rng[1]) / (rng[2] - rng[1])
}
rescalse01(c(0, 5, 10))
x <- c(1:10, Inf)
rescalse01(x)
rescalse01 <- function(x){
rng <- range(x, na.rm = TRUE, finite = TRUE)
(x - rng[1]) / (rng[2] - rng[1])
}
x <- c(1:10, Inf)
rescalse01(x)
has_name <- function(x) {
nms <- names(x)
if (is.null(nms)) {
rep(FALSE, length(x))
}
else {
!is.na(nms) & nms != ""
}
}
show_invisible <- function(df) {
n = sum(is.na(df))
cat("Missing values: ", n, "\n", sep = "")
invisible(df)
}
show_invisible(mtcars)
show_invisible(flights)
show_invisible(mpg)
class(x)
class(show_invisible(mtcars))
dim(show_invisible(df))
dim(show_invisible(mtcars))
mtcars %>%
show_invisible() %>%
mutate(mpg = ifelse(mpg < 20, NA, mpg)) %>%
show_invisible()
library(tidyverse)
typeof(letters)
typeof(1:10)
x <- list("a", "b", 1:10)
length(x)
1:10 %% 3 == 0
typeof(1)
typeof(1L)
1.5L
1.5L
sqrt(2) ^ 2
x <- sqrt(2) ^ 2
x
x - 2
c(-1, 0, 1)
c(-1, 0, 1) / 0
is.finite(c(-1, 0, 1) / 0)
is.infinite(c(-1, 0, 1) / 0)
x <- "This is a reasonably long string."
pryr::object_size(x)
typeof(NA)
typeof(NA_real_)
x <- sample(20, 100, replace = TRUE)
y <- x > 10
x
y
sum(y)
x <- sample(20, 100, replace = TRUE)
y <- x > 10
sum(y)
mean(y)
sample(10) + 100
runif(10) > 0.5
1:10 + 1:2
tibble(x = 1:4, y = 1:2)
tibble(x = 1:4, y = rep(1:2, 2))
tibble(x = 1:4, y = rep(1:2, each = 2))
c(x = 1, y = 2, z = 4)
set_names(1:3, c("a", "b", "c"))
library(tidyverse)
library(modelr)
options(na.action = na.warn)
ggplot(sim1, aes(x, y))+
geom_point()
sim1
sim1 %>%
head(30)
view(sim1)
models <- tibble(
a1 = runif(250, -20, 40),
a2 = runif(250, -5, 5)
)
View(models)
ggplot(sim1, aes(x, y))+
geom_abline(
aes(intercept = a1, slope = a2),
data = models, alpha = 1/4
)+
geom_point()
ggplot(sim1, aes(x, y))+
geom_abline(
aes(intercept = a1, slope = a2),
data = models, alpha = 1/4
)+
geom_point()
model1 <- function(a, data) {
a[1] + data$x * a[2]
}
model1(c(7, 1.5), sim1)
measure_distance <- function(mod, data) {
diff <- data$y - model1(mod, data)
sqrt(mean(diff ^ 2))
}
measure_distance(c(7, 1.5), sim1)
measure_distance(c(a1, a2), sim1)
sim1_dist <- function(a1, a2) {
measure_distance(c(a1, a2), sim1)
}
models <- models %>%
mutate(dist = purrr::map2_dbl(a1, a2, sim1_dist))
models
ggplot(sim1, aes(x, y))+
geom_point(size = 2, color = "grey30")+
geom_abline(
aes(intercept = a1, slope = a2, color = -dist),
data = filter(models, rank(dist) <= 10)
)
ggplot(models, aes(a1, a2))+
geom_point(
data = filter(models, rank(dist) <= 10),
size = 4, color = "red"
)+
geom_point(aes(color = -dist))
install.packages("tensorflow")
library(tensorflow)
# Set data type
DTYPE <- "float32"
#DTYPE <- "float64"
tf$keras$backend$set_floatx(DTYPE)
install_tensorflow()
install_tensorflow()
# Final time
T <- 1
# Spatial dimensions
dim <- 100
# Number of intervals in time
N <- 40
# Derive time step size and t_space
dt <- T/N
t_space <- seq(0, T, length.out = N + 1)
# Point of interest at t=0
x <- rep(0, dim)
# Diffusive and drift term is assumed to be constant
sigma <- 0.2
mu <- 0.02
draw_X_and_dW <- function(num_sample, x) {
# Function to draw num_sample many paths of the stochastic process X
# and the corresponding increments of simulated Brownian motions dW.
dim <- length(x)
# Draw all increments of W
dW <- array(rnorm(num_sample * dim * N, mean = 0, sd = sqrt(dt)),
dim = c(num_sample, dim, N))
# Initialize the X array
X <- array(0, dim = c(num_sample, dim, N + 1))
# Set starting point to x for each draw
X[, , 1] <- matrix(rep(100, num_sample * dim), ncol = dim)
for (i in 1:N) {
# The Euler-Maruyama Scheme
X[, , i + 1] <- (1 + mu * dt) * X[, , i] + sigma * X[, , i] * dW[, , i]
}
# Return simulated paths as well as increments of Brownian motion
list(X = X, dW = dW)
}
num_sample <- 100
# Draw 10 sample paths
result <- draw_X_and_dW(num_sample, rep(0, 1))
# Extract X and dW from the result
X <- result$X
dW <- result$dW
# Plot these paths
plot(t_space, X[1, 1, ], type = "l", xlab = "t", ylab = "X_t")
for (i in 2:num_sample) {
lines(t_space, X[i, 1, ])
}
num_sample <- 10
# Draw 10 sample paths
result <- draw_X_and_dW(num_sample, rep(0, 1))
# Extract X and dW from the result
X <- result$X
dW <- result$dW
# Plot these paths
plot(t_space, X[1, 1, ], type = "l", xlab = "t", ylab = "X_t")
for (i in 2:num_sample) {
lines(t_space, X[i, 1, ])
}
library(ggplot2)
num_sample <- 100
# Draw 100 sample paths
result <- draw_X_and_dW(num_sample, rep(0, 1))
# Extract X from the result
X <- result$X
# Convert X to a data frame
df <- data.frame(t = rep(t_space, num_sample),
X_t = as.vector(X[, 1, ]))
# Create the plot
ggplot(df, aes(x = t, y = X_t, group = 1)) +
geom_line(alpha = 0.5, color = "blue") +
xlab("t") +
ylab("X_t") +
ggtitle("Sample Paths of X")
# Define the BSDEModel class
BSDEModel <- function() {
# Initialize the value u(0, x) randomly (uniform distribution)
u0 <- tf$Variable(tf$random$uniform(shape = c(1), minval = 0.1, maxval = 0.3, dtype = DTYPE))
# Initialize the gradient nabla u(0, x) randomly (uniform distribution)
gradu0 <- tf$Variable(tf$random$uniform(shape = c(1, dim), minval = -0.1, maxval = 0.1, dtype = DTYPE))
# Create template of dense layer without bias and activation
_dense <- function(dim) {
library(zoo)
source("fm_casestudy_fx_1.r")
